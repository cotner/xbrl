Assumptions
-----------

The implementation will presume that the instances being loaded are XDT valid.

The implementation will presume that the XDT dimensions reported for all facts are
unambiguous. i.e.: Users will know for certain which dimensions are reported for each
fact and what value each dimension has.

The XDT support will be provided by a separate extension module that will generate its own 
JAR file.  This will ensure that should the XDT spec ever be deprecated, we have not 
contaminated the core of the XBRLAPI implementation.

New fragment types
------------------
 
SAX content handler needs to be able to detect usage of XDT dimensions and to 
decorate fragments accordingly.  The Hypercubes and Dimensions will both be new 
fragment types (subclassing the concept fragment type).  typed and explicit 
dimensions will also be distinguished at a fragment-type level in the data store.
Domain members will be treated as normal concepts but it will be possible to force 
casting of a concept into a domain member sub-class.  That subclass will not be used 
when storing concepts in the data store but will expose XDT-specific information 
in a more useable manner.

  Hypercube
  Dimension
    Explicit dimension
    Typed dimension

Handling for the xbrldt:typedDomainRef 
--------------------------------------
  Containing concept treated as a custom link -> typed dimensions implement the simple link interface.

Dimension values
----------------

Dimension values will not be split out of segment and scenario content as a set of fragments.

Dimension values will be accessible using a dimension value accessor class that takes as its 
argument the fact that the dimension is being accessed for.

It will be possible to interpret an instance using an aspect model.

 -> Nondimensional aspect model is already basically implemented.
 -> XDT aspect model needs to be implemented.
 
 For a given aspect model, it will be possible to determine what 
 aspects each fact has and what value each aspect has.
 
 For dimensions with default values, if a fact does not report a value
 for that dimension, then fact has the default value for that dimension,
 regardless of of the hypercube conjunctions associated with the fact's concept.

XDT aspect documentation
--------------------

XDT aspects can have labels, as can their values (for explicit dimensions) and their
domain definitions (for typed dimensions).

We need to be able to recover the labels for such objects.

Complexities
------------

- Handling of xbrldt:targetRole attribute (at least required for default dimension values)

- Testing for equality of two typed dimension values.
  Requires s-equal2 comparison.
  
- Consider providing a method in the API where the user provides their
own XPath expression for filtering the values for a given dimension. (WH)
  
- Consider providing a method to select a set of domain members based upon
a network of relationships.  IE given a domain member a linkrole and an arcrole,
get all the domain members that are children/descendants of the given domain member
or get all of the domain members in the specified network.  This requires testing 
that the nodes in the network are actually domain members.  An exception must be thrown
if there are nodes in the network that are not domain members.

Simple rendering use cases

A) Render a list of facts, with each entry in the list being distinguished on the
basis of its value for a given dimension.  All facts in the list have a value for 
the dimension.

Process:

1.  Get the name of the dimension.

2.  Get the set of all facts.

3.  Use the getValue method of the DimensionValueAccessor to determine which
report a value for that dimension and put those facts in a FragmentList.

4.  Order the fragment list based upon some ordering of the dimension values.

      Create a variety of comparators that will support different approaches to 
      ordering dimension values.

      Order typed dimensions using a specified ordering criteria (or use some
      sensible default if such can be defined) that applies an XQuery expression to the 
      element giving the typed dimension value (i.e. the one with the attribute that identifies
      the typed dimension)
