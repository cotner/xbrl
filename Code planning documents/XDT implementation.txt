Assumptions
-----------

The implementation will presume that the instances being loaded are XDT valid.

The implementation will presume that the XDT dimensions reported for all facts are
unambiguous. i.e.: Users will know for certain which dimensions are reported for each
fact and what value each dimension has.

The XDT support will be provided by a separate extension module that will generate its own 
JAR file.  This will ensure that should the XDT spec ever be deprecated, we have not 
contaminated the core of the XBRLAPI implementation.

New fragment types
------------------
 
SAX content handler needs to be able to detect usage of XDT dimensions and to 
decorate fragments accordingly.  The Hypercubes and Dimensions will both be new 
fragment types (subclassing the concept fragment type).  typed and explicit 
dimensions will also be distinguished at a fragment-type level in the data store.
Domain members will be treated as normal concepts but it will be possible to force 
casting of a concept into a domain member sub-class.  That subclass will not be used 
when storing concepts in the data store but will expose XDT-specific information 
in a more useable manner.

  Hypercube
  Dimension
    Explicit dimension
    Typed dimension

Handling for the xbrldt:typedDomainRef 
--------------------------------------
  Containing concept treated as a custom link -> typed dimensions implement the simple link interface.

Dimension values
----------------

Dimension values will not be split out of segment and scenario content as a set of fragments.

Dimension values will be accessible using a dimension value accessor class that takes as its 
argument the fact that the dimension is being accessed for.

It will be possible to interpret an instance using an aspect model.

 -> Nondimensional aspect model is already basically implemented.
 -> XDT aspect model needs to be implemented.
 
 For a given aspect model, it will be possible to determine what 
 aspects each fact has and what value each aspect has.
 
 For dimensions with default values, if a fact does not report a value
 for that dimension, then fact has the default value for that dimension,
 regardless of of the hypercube conjunctions associated with the fact's concept.

XDT aspect documentation
--------------------

XDT aspects can have labels, as can their values (for explicit dimensions) and their
domain definitions (for typed dimensions).

We need to be able to recover the labels for such objects.

Complexities
------------

- Handling of xbrldt:targetRole attribute (at least required for default dimension values)

- s-equal2 implementation to identify matching dimension values (requires Saxon library)

